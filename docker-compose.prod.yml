version: '3.3'

services:
  web:
    build:
       context: .
       dockerfile: Dockerfile.prod
    command: bash -c 'while !</dev/tcp/db/5432; do sleep 1; done; gunicorn --bind 0.0.0.0:5000 manage:app'
    restart: always
    volumes:
      - .:/home/app/web
    expose:
      - 5000
    environment:
      - FLASK_APP=odk_fieldmap/__init__.py
      - FLASK_ENV=${FLASK_ENV}
      - WEB_DOMAIN=${WEB_DOMAIN}
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flask.rule=Host(`${WEB_DOMAIN}`)"
      - "traefik.http.routers.flask.tls=true"
      - "traefik.http.routers.flask.tls.certresolver=letsencrypt"
    depends_on:
      - db

  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}

  traefik:
    build:
      context: ./traefik
      dockerfile: Dockerfile.traefik
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik-public-certificates:/certificates"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`${METRICS_DOMAIN}`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${METRICS_LOGIN}"

volumes:
  traefik-public-certificates:
  postgres_data_prod:
